#python-chess import 
#https://github.com/niklasf/python-chess
import chess

#used to access Polyglot book
import chess.polyglot

#set the initial position
board = chess.Board()
print(board)

#mouvement possible
possibilite=board.legal_moves

def minmax(depth,board,couleur):
    '''renvoie le meilleur coup à faire en prévision du résultat des depth prochain coups a partir du plateau actuel
    pour le joueur couleur'''
    bestval=-999999
    bestmove=None
    possiblesmoves=board.legal_moves
    listMoves = []
    for move in possiblesmoves:
        listMoves.append(move)
    if depth==0:
        return evalb(board,couleur)
    else :
        for x in listMoves:
            move=Move.from_uci(str(x))
            board.push(move)
            value=max(bestval,minmax(depth-1,board,couleur))
            if value>bestval:
                bestval=value
                bestmove=move
    return bestmove
        
def evalb(board,couleur):
    '''renvoie la valeur d'un plateau en fonction du nombre de piece restante
    demande le plateau et la couleur du joueur demandant le meilleur coup 
    (regarder comment appeler la couleur) '''
    evalb=0
    for pos in range(64):
        if board.piece_at(pos).color==couleur: 
            evalb+=getPieceValue(str(board.piece_at(pos)))
        else:
            evalb-=getPieceValue(str(board.piece_at(pos)))
    return evalb
    
       
def getPieceValue(piece):
        '''renvoie la valeur de la piece'''
        if(piece == None):
            return 0
        value = 0
        if piece == "P" or piece == "p":
            value = 1
        if piece == "N" or piece == "n":
            value = 3
        if piece == "B" or piece == "b":
            value = 3
        if piece == "R" or piece == "r":
            value = 6
        if piece == "Q" or piece == "q":
            value = 9
        if piece == 'K' or piece == 'k':
            value = 10000 
        return value
        
def deplacePlayer():
    """Le joueur choisi son coup parmis les coups possible et l'effectue"""
    print(possibilite)
    print('Choose your movement')
    mvmt=input()
    #tant que le mouvement n'est pas possible on en demande un possible
    while mvmt not in possibilite :
        print("le mouvement n'est pas permis, merci de choisir un mouvement parmis la liste suivante")
        print(possibilite)
        mvmt=input()
    board.push_san(mvmt)
    print(board)
    
    
def deplaceIA() :
    """l'IA trouve le meilleur choix de mouvement et l'execute"""
    #meilleur choix sera une fonction qui recherchera le meilleur coup 
    board.push_san(meilleur_choix())
    print(board)
    

      
    
while board.game_over()==False
#permet de verifier si la partie est terminée car au moins une des fonctions ci-dessous est verifié 
#is_checkmate() Vérifie si la position actuelle est un échec et mat
#is_stalemate () Vérifie si la position actuelle est une impasse.
#is_insufficient_material() Vérifie si aucune des parties n'a suffisamment de matériel gagnant
#is_fivefold_repetition () si une position se produit pour la cinquième fois.
#is_seventyfive_moves () si les joueurs jouent 75 coups sans déplacer un pion ou prendre une pièce adverse, la partie s'arrête.
#can_claim_draw () Vérifie si le joueur a déplacé peut réclamer un match nul selon la règle des 75 coups ou 5 répétition
#is_variant_end () Vérifie si le jeu est terminé en raison d'une condition spéciale de fin de variante.



  #enregistrer chaque mouvement dans une liste  
    moves = board.legal_moves
    coup=[]
 for move in moves:
      coup.append(move)
