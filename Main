#python-chess import
#https://github.com/niklasf/python-chess
import chess

#set the board to its initial position
#corresponding to: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
board = chess.Board()

#print the board on the console
print(board)

# Si la position est dans Polyglot 
# regarder les coups proposés avec les pondérations
# jouer le coup     

def meilleur_choix(board):
    
    #creer une liste coup
    #c'est une liste composee par les listes
    l_coup=[]
    #access the Polyglot book
    #entry.move() : les mouvement, representer par binaire
    #entry.weight : les pondérations jouer le coup
    #entry.learn : Une autre valeur entière qui peut être utilisée pour d'autres informations
    with chess.polyglot.open_reader("bookfish.bin") as reader:
        for entry in reader.find_all(board):
            l_coup.append([entry.move(), entry.weight, entry.learn])

        #dans la liste des coups, choisir le meilleur coups
        ponderation = 0
        indice = 0
        if l_coup == []:
            return "il n'y a pas de mouvement"
        else:
            for i in range (len(l_coup)):
            # comparer le pondération pour chaque mouvement
            #ponderation: l_coup[][1]
                if l_coup[i][1] > ponderation :
                    indice = i
                    ponderation = l_coup[i][1]
            #retourner le mouvement
            return l_coup[indice][0]

def IAvsIA()
    #tant que la partie n'est pas finie
    while (not board.is_game_over()):
        #on recupere la position
        fen=board.fen()
        #on recupere les coups possible
        possibilite=board.legal_moves
        #on regarde si la position est dans polyglot
        if meilleur_choix(board)="il n'y a pas de mouvement":
            #minimax
        elif meilleur_choix(board) in possibilite :
            nextmove=meilleur_choix(board)
            board.push(nextmove)
        if board.is_game_over():
            print("Game Over")
            print(board.result())
            
